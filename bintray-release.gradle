//apply plugin: 'com.novoda.bintray-release'
apply plugin: 'com.github.panpf.bintray-publish'
apply plugin: 'maven'
// This generates sources.jar
task sourcesJar(type: Jar) {
    if (project.hasProperty("android")) {
        from android.sourceSets.main.java.srcDirs
    } else {
        from sourceSets.main.java.srcDirs
    }
    archiveClassifier.convention('sources')
}
if (project.hasProperty("android")) {
    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
}
// This generates javadoc.jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier.convention('javadoc')
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// javadoc configuration
javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
    }
}

afterEvaluate {
    Task bintrayUploadTask = tasks.findByName('bintrayUpload')
    Task uploadArchivesTask = tasks.findByName('uploadArchives')
    if (bintrayUploadTask != null && uploadArchivesTask != null) {
        bintrayUploadTask.dependsOn uploadArchivesTask
    }
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
    }
}

// load properties
Properties properties = new Properties()
File localPropertiesFile = project.file("$rootProject.projectDir.absolutePath/local.properties");
if (localPropertiesFile.exists()) {
    properties.load(localPropertiesFile.newDataInputStream())
}

def bintray_Org = properties.getProperty("bintray.org")
def bintray_User = properties.getProperty("bintray.user")
def bintrayApikey = properties.getProperty("bintray.apikey")
def mavenUserName = properties.getProperty("mavenUserName")
def mavenUserPassword = properties.getProperty("mavenUserPassword")

publish {
    groupId = projectGroupId
    artifactId = projectArtifactId
    uploadName = projectName
    website = projectSiteUrl
    repository = projectGitUrl
    desc = projectDesc
    publishVersion = projectArtifactVersion
    userOrg = bintray_Org
    bintrayUser = bintray_User
    bintrayKey = bintrayApikey
    dryRun = false
}

uploadArchives {
    repositories {
        mavenDeployer {
//            repository(url: 'your repositories') {
//                authentication(userName: mavenUserName, password: mavenUserPassword)
//            }
            repository(url: uri("$rootProject.projectDir.absolutePath/repo"))
            pom.version = projectArtifactVersion
            pom.artifactId = projectArtifactId
            pom.groupId = projectGroupId
            pom.project {
                name = projectName
                packaging = artifactType
                description = projectDesc
            }
        }
    }
}
